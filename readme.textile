h1. "Avalanche2D-JS":http://stepheneb.github.com/avalanche2d-js/avalanche2d.html

A partial "JavaScript adaptation":http://stepheneb.github.com/avalanche2d-js/avalanche2d.html of Bob Tinker's "NetLogo":http://ccl.northwestern.edu/netlogo/ model "Bureaucrats.v6":http://stepheneb.github.com/avalanche2d-js/nlogo/Bureaucrats.v6.nlogo exploring "Self-Organised Criticality":http://en.wikipedia.org/wiki/Self-organized_criticality

bq. The mathematics of avalanche size and frequency follows a power law that can be simulated to
    a first approximation by any system that exhibits self-organized criticality (SOC). In "How
    Nature Works"" Per Bak reports a simplified model of a sandpile that he, Chao Tang, and Curt
    Wiesenfeld developed that shows SOC, the so-called BTW model. Bak also mentions that
    Grassberger describes a representation of this model that is fanciful but equivalent to the
    BTW model. Imagine an N-by-N grid of office desks and a bureaucrat sitting at each. A folder
    is randomly assigned to one desk. The bureaucrat does nothing until four or more folders are
    on his desk at which time he sends one to each of his four nearest neighbors. Any bureaucrat
    sitting at the edge of this array throws a folder out the window if there is no desk to send
    it to. Sometimes, adding one folder can cause multiple redistributions of folders as one
    bureaucrat's actions causes neighbors to exceed three folders, which then ripples through
    the office. In principle, just adding one new folder might involve redistribution at every
    desk, sometimes multiple times.

**The screen after approximately 5000 avalanches.**

!http://stepheneb.github.com/avalanche2d-js/images/screenshot.png(screenshot of avalanche2d-js)!:http://stepheneb.github.com/avalanche2d-js/avalanche2d.html

I'm working on new ways of being able to create and run models in html5 browser-technologies that we used to build with Java and wanted to see how hard it would be to convert one of Bob's NetLogo models. The avalanche/bureaucrat model was a good first choice because it only uses the patches feature of NetLogo and not turtles.

While it would take a good deal more work to make a whole authoring environment that would be effective and productive for non-professional programmers I think this is a very successful proof-of-concept. At this point I think it would be relatively easy to convert a model that had turtles also.

Seth Tisue, the lead NetLogo developer contributed "Bureaucrats-fast":http://stepheneb.github.com/avalanche2d-js/nlogo/Bureaucrats-fast.nlogo a simplified re-write of "Bureaucrats.v6":http://stepheneb.github.com/avalanche2d-js/nlogo/Bureaucrats.v6.nlogo that runs about 20 times as fast as the original. "Bureaucrats-fast":http://stepheneb.github.com/avalanche2d-js/nlogo/Bureaucrats-fast.nlogo is more appropriate to use when comparing performance of a NetLogo model with this JavaScript adaptation.

Testing on Oct 20 2011 show this JavaScript adaptation runs about 20 times faster on Chrome than "Bureaucrats-fast":http://stepheneb.github.com/avalanche2d-js/nlogo/Bureaucrats-fast.nlogo when displaying folders and graph and about 11 times faster running just the computational model. See **Benchmarks** section below.

h2. References

# "Review of: How Nature Works: The Science of Self-Organised Criticality, Per Bak, New York, NY: Copernicus Press 1996":http://jasss.soc.surrey.ac.uk/4/4/reviews/bak.html
# "Self organized criticality in earth systems By Stefan Hergarten, page 94":http://books.google.com/books?id=eBZbupdVnYAC&pg=PA94&lpg=PA94&dq=Grassberger++bureaucrat&source=bl&ots=XR7W1E61Wa&sig=06HmPg4d9YyBUz63RIphjUza1ik&hl=en&ei=MxGVTvThPIjk0QG4npnGBw&sa=X&oi=book_result&ct=result&resnum=1&ved=0CBoQ6AEwAA#v=onepage&q=Grassberger%20%20bureaucrat&f=false
# "On the avalanche size distribution in the BTW model":http://www.cmth.ph.ic.ac.uk/people/k.christensen/papers/preprints/preprint_btw.pdf
# "Wikipedia: Self-Organised Criticality":http://en.wikipedia.org/wiki/Self-organized_criticality

h2. Benchmarks

h3. Time for modeling and rendering to both the model canvas and the real-time graph rendering using a Canvas overlay over the D3.js SVG graph. [1]

|_. Mac OS X 10.6.8 [2]        |_\2>. ave rate (model-steps/s) for 5000 steps |
|_. Browser                    |_=.                  |_=.  graph/canvas off   |
| Chrome 14.0.835.186          |=.      8695         |=.          11160       |
| Safari v5.1.1 (6534.51.22)   |=.      3713         |=.           4703       |
| FireFox 7.0.1 [3]            |=.       385         |=.           3251       |
|                              |                     |                        |
|_. Windows 7 in VirtualBox    |_\2>.                                         |
| Chrome 14.0.835.202          |=.      6173         |=.          12987       |
| IE v9.0.8112.16421 [3]       |=.      1172         |=.           4873       |
| FireFox 7.0.1 [3]            |=.       628         |=.           3626       |
| Safari v5.1.1 (7534.51.22)   |=.       499         |=.            709       |
|                              |                     |                        |
|_. NetLogo 5.0RC2             |_\2>.                                         |
| Bureaucrats-fast             |=.       448         |=.           1172       |
|                              |                     |                        |
|_. Tablets and SmartPhones    |_\2>.                                         |
| iPad2, iOS 4.3.1             |=.       130         |=.            263       |
| iPhone 4S, iOS 4.3.1         |=.       203         |=.                      |
| Samsung Galaxy tablet        |=.       243         |=.                      |

fn1. _Data collected October 21, 2011_

fn2. _MacBook Pro, 2.66 GHz Intel Core i7, Mac OS X 10.6.8_

fn3. _There is a "Canvas-related bug in FireFox":https://bugzilla.mozilla.org/show_bug.cgi?id=695959 which prevents the display of data in the graph while the model is running. This issue is also present in IE9._
